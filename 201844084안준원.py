# -*- coding: utf-8 -*-
"""201844084안준원.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/148oUW-ogov4_X9mKb_EilQFxBjIsYQR1
"""

#  폰트 설치
import matplotlib.font_manager as fm

!apt-get -qq -y install fonts-nanum > /dev/null
fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=9)
fm._rebuild()

# 드라이브 마운트
from google.colab import drive
drive.mount('/content/drive')

#런타임 재시작
import os
os.kill(os.getpid(), 9)

#  폰트 설정
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.font_manager as fm

# 마이너스 표시 문제
mpl.rcParams['axes.unicode_minus'] = False
	
# 한글 폰트 설정
path = '/usr/share/fonts/truetype/nanum/NanumGothicBold.ttf'
font_name = fm.FontProperties(fname=path, size=18).get_name()
plt.rc('font', family=font_name)
fm._rebuild()

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# apt-get update
# apt-get install g++ openjdk-8-jdk python-dev python3-dev
# pip3 install JPype1
# pip3 install konlpy

# Commented out IPython magic to ensure Python compatibility.
# %env JAVA_HOME "/usr/lib/jvm/java-8-openjdk-amd64"

"""## 한글 단어 분석을 위한 패키지 준비"""

import json
import re

from konlpy.tag import Okt

from collections import Counter

import matplotlib
import matplotlib.pyplot as plt
from matplotlib import font_manager, rc
from wordcloud import WordCloud

"""# 1. 데이터 준비

### 1-1. 라벨링 데이터 압축 해제
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/dataset/라벨링데이터/TL1.대형차
!unzip /content/drive/MyDrive/dataset/라벨링데이터/TL1.대형차.zip
# %cd /content/drive/MyDrive/dataset/라벨링데이터/TL2.중형차
!unzip /content/drive/MyDrive/dataset/라벨링데이터/TL2.중형차.zip
# %cd /content/drive/MyDrive/dataset/라벨링데이터/TL3.소형차
!unzip /content/drive/MyDrive/dataset/라벨링데이터/TL3.소형차.zip

"""### 1-2. 분석할 데이터 추출"""

import os
import json

directory = '/content/drive/MyDrive/dataset/라벨링데이터/TL1.대형차/불법차량'
 
# iterate over files in
# that directory
messageBig = ''
error_cnt = 0
for filename in os.listdir(directory):
    f = os.path.join(directory, filename)
    # checking if it is a file
    if os.path.isfile(f):
        # print(f)
        with open(f, "r") as json_file:
          # print(json_file)
          try:
            json_load = json.load(json_file)
            print(json_load['FILE'][0]['ITEMS'][0])
            messageBig = messageBig + json_load['FILE'][0]['ITEMS'][0]['CLASS'] + "," + json_load['FILE'][0]['ITEMS'][0]['CLASS'] + ","
          except:
            error_cnt += 1
print(error_cnt)

import os
import json

directory = '/content/drive/MyDrive/dataset/라벨링데이터/TL2.중형차/불법차량'
 
# iterate over files in
# that directory
messageMid = ''
error_cnt = 0
for filename in os.listdir(directory):
    f = os.path.join(directory, filename)
    # checking if it is a file
    if os.path.isfile(f):
        # print(f)
        with open(f, "r") as json_file:
          # print(json_file)
          try:
            json_load = json.load(json_file)
            print(json_load['FILE'][0]['ITEMS'][0])
            messageMid = messageMid + json_load['FILE'][0]['ITEMS'][0]['CLASS'] + "," + json_load['FILE'][0]['ITEMS'][0]['CLASS'] + ","
          except:
            error_cnt += 1
print(error_cnt)

import os
import json

directory = '/content/drive/MyDrive/dataset/라벨링데이터/TL3.소형차/불법차량'
 
# iterate over files in
# that directory
messageSma = ''
error_cnt = 0
for filename in os.listdir(directory):
    f = os.path.join(directory, filename)
    # checking if it is a file
    if os.path.isfile(f):
        # print(f)
        with open(f, "r") as json_file:
          # print(json_file)
          try:
            json_load = json.load(json_file)
            print(json_load['FILE'][0]['ITEMS'][0])
            messageSma = messageSma + json_load['FILE'][0]['ITEMS'][0]['CLASS'] + "," + json_load['FILE'][0]['ITEMS'][0]['CLASS'] + ","
          except:
            error_cnt += 1
print(error_cnt)

"""### 1-3. 품사 태깅 : 명사 추출"""

splitBig = messageBig.split(",")
splitBig

splitMid = messageMid.split(",")
splitMid

splitSma = messageSma.split(",")
splitSma

"""## 2. 데이터 탐색

### 2-1. 단어 빈도 탐색
"""

countBig = Counter(splitBig)

countBig   #출력하여 내용 확인

countMid = Counter(splitMid)

countMid   #출력하여 내용 확인

countSma = Counter(splitSma)

countSma   #출력하여 내용 확인

word_count_Big = dict()

#for tag, counts in count.most_common(80):
for tag, counts in countBig.most_common(70):  
    if(len(str(tag))>1):
        word_count_Big[tag] = counts
        print("%s : %d" % (tag, counts))

word_count_Mid = dict()

#for tag, counts in count.most_common(80):
for tag, counts in countMid.most_common(70):  
    if(len(str(tag))>1):
        word_count_Mid[tag] = counts
        print("%s : %d" % (tag, counts))

word_count_Sma = dict()

#for tag, counts in count.most_common(80):
for tag, counts in countSma.most_common(70):  
    if(len(str(tag))>1):
        word_count_Sma[tag] = counts
        print("%s : %d" % (tag, counts))

print(word_count_Big)
print(word_count_Mid)
print(word_count_Sma)

del word_count_Big['정상차량']
del word_count_Mid['정상차량']
del word_count_Sma['정상차량']

print(word_count_Big)
print(word_count_Mid)
print(word_count_Sma)

"""### 히스토그램"""

plt.figure(figsize=(12,5))
plt.xlabel('키워드')
plt.ylabel('빈도수')
plt.grid(True)

sorted_Keys = sorted(word_count_Big, key=word_count_Big.get, reverse=True)
sorted_Values = sorted(word_count_Big.values(), reverse=True)

plt.bar(range(len(word_count_Big)), sorted_Values, align='center')
plt.xticks(range(len(word_count_Big)), list(sorted_Keys), rotation='75')

plt.show()

plt.figure(figsize=(12,5))
plt.xlabel('키워드')
plt.ylabel('빈도수')
plt.grid(True)

sorted_Keys = sorted(word_count_Mid, key=word_count_Mid.get, reverse=True)
sorted_Values = sorted(word_count_Mid.values(), reverse=True)

plt.bar(range(len(word_count_Mid)), sorted_Values, align='center')
plt.xticks(range(len(word_count_Mid)), list(sorted_Keys), rotation='75')

plt.show()

plt.figure(figsize=(12,5))
plt.xlabel('키워드')
plt.ylabel('빈도수')
plt.grid(True)

sorted_Keys = sorted(word_count_Sma, key=word_count_Sma.get, reverse=True)
sorted_Values = sorted(word_count_Sma.values(), reverse=True)

plt.bar(range(len(word_count_Sma)), sorted_Values, align='center')
plt.xticks(range(len(word_count_Sma)), list(sorted_Keys), rotation='75')

plt.show()

"""### 워드클라우드"""

wc = WordCloud(path, background_color='ivory', width=800, height=600)
cloudBig=wc.generate_from_frequencies(word_count_Big)

plt.figure(figsize=(8,8))
plt.imshow(cloudBig)
plt.axis('off')
plt.show()

wc = WordCloud(path, background_color='ivory', width=800, height=600)
cloudMid=wc.generate_from_frequencies(word_count_Mid)

plt.figure(figsize=(8,8))
plt.imshow(cloudMid)
plt.axis('off')
plt.show()

wc = WordCloud(path, background_color='ivory', width=800, height=600)
cloudSma=wc.generate_from_frequencies(word_count_Sma)

plt.figure(figsize=(8,8))
plt.imshow(cloudSma)
plt.axis('off')
plt.show()

cloudBig.to_file('cloudBig.jpg')
cloudMid.to_file('cloudMid.jpg')
cloudSma.to_file('cloudSma.jpg')